import javax.swing.*;
import java.awt.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

class PointToPaint {
    public int x;
    public int y;
    public Color color;

    public PointToPaint(int x, int y, Color color) {
        this.x = x;
        this.y = y;
        this.color = color;
    }
}

public class Painter extends JPanel implements Runnable {
    private BlockingQueue<PointToPaint> queue = new LinkedBlockingQueue<>();

    public Painter() {
        new Thread(this).start(); // Inicia el hilo que consume los puntos
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        // Dibuja los puntos de la cola hasta que esté vacía
        while (!queue.isEmpty()) {
            PointToPaint point = queue.poll();
            g.setColor(point.color);
            g.fillOval(point.x, point.y, 5, 5); // Dibuja un punto
        }
    }

    @Override
    public void run() {
        // Simula producción de puntos
        for (int i = 0; i < 100; i++) {
            queue.offer(new PointToPaint(i * 10, i * 10, Color.RED)); // Ofrece puntos a la cola
            try {
                Thread.sleep(50); // Simula tiempo de espera
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Painter");
        frame.add(new Painter());
        frame.setSize(400, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}



package branch;
import javax.swing.*;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainBranch {

    public static void main(String[] args) {
        //String s = "F[+F]F[+F[+F]F]F[+F]F[+F[+F]F[+F[+F]F]F[+F]F]F[+F]F[+F[+F]F]F[+F]F";
        String s= "XF+F+XF-F-F-XF-F+F+F-F+F+F-XF+F+XF+F+XF-F-F-XF-F+F+F-F+F+F-XF+F+XF+F+XF-F-F-XF-F+F+F-F+F+F-XF+F";

        JFrame frame = new JFrame("L-Systems Demo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBackground(Color.BLACK);
        frame.setSize(800, 600);

        Monitor monitor = new Monitor();
        double startX = frame.getWidth() / 2;
        double startY = frame.getHeight() / 2;

        PaintBranch paintBranch = new PaintBranch(monitor);
        frame.getContentPane().add(paintBranch);
        frame.setVisible(true);

        ProduceLine producer = new ProduceLine(monitor, s, 60, startX, startY);
        new Thread(producer).start();

        // Timer para refrescar el panel periódicamente
        Timer timer = new Timer(20, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                paintBranch.repaint();
            }
        });
        timer.start();
    }
}
